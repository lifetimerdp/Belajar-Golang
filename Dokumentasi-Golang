install golang versi terbaru. Download dan install di website resminya -> https://go.dev/doc/install
Ikuti instruksi yang diberikan di website golang

1. Membuat file golang
   --> buat folder khusus golang
   --> touch hello.go
 
 
 2. Menulis hello world
   --> sudo nano hello.go
   --> isi filenya yaitu:
   ------------------------------
   package main
   
   import "fmt"
   
   func main() {
      fmt.Println("Hello World")
   }
   ------------------------------

   ket: - "package main", dan func main adalah perintah wajib untuk setiap file golang
        - "fmt" digunakan untuk melakukan print
        

3. Jalankan filenya
   --> go run hello.go
   --> perintah "go run namafile.go" hanya direkomendasikan untuk mencoba menjalankan file golang
       yang masih tahap development atau masih dalam tahap uji coba. Jika sudah selesai, kalian
       harus melakukan yang namanya "compile" dan hasil compile filenya yang akan digunakan!!


4. Compile file go
   --> go build hello.go
   --> hasilnya adalah file yang sama, yaitu file dengan nama hello (ekstensi .go telah dihilangkan)


5. Jalankan file go
   --> ./hello atau sudo ./hello


6. Tipe data number di Golang
   --> Terdapat 2 jenis angka di golang:
       - integer: angka biasa 1, 2, 3, 4, dst
       - floating point: angka dengan koma 1.8, 2.5, 6.7
         { titik disitu adalah koma (saya tulis sama seperti format kalkulator, agar lebih mudah) }
         
   --> "Integer" dibagi lagi ke dalam 8 jenis tipe data:
       - int8  : untuk angka -128 sampai maksimumnya 127
       - int16 : untuk angka -32768 sampai maksimumnya 32767
       - int32 : untuk angka -2147483648 sampai maksimumnya 2147483647 (sekitar -2 sekian miliar sampai 2 sekian miliar)
       - int64 : untuk angka -9223372036854775808 sampai maks 9223372036854775807
                 (sekitar -9 sekian Kuantiliun sampai 9 sekian Kuantiliun). Kuantiliun (biasanya disebut angka dengan nol 18),
                 ini sebutan angka diatas kuadtriliun
       - uint8  : untuk angka 0 sampai maks 255
       - uint16 : untuk angka 0 sampai maks 65535
       - uint32 : untuk angka 0 sampai maks 4294967295
       - uint64 : untuk angka 0 sampai maks 18446744073709551615 (sekitar 18 Kuantiliun)
         { Sesuaikan dengan kebutuhan kalian. Misalnya untuk data ujian siswa, gunakan int8 (karena dibawah 127).
           Kalau tidak sesuai, akan membebani kinerja dan jadi sia-sia }
           
   --> "Floating point" dibagi menjadi 4 tipe data:
       - float32     : 1.18 x 10 pangkat -38 maksnya 3.4 x 10 pangkat 38
       - float64     : 2.23 x 10 pangkat -308 maksnya 1.80 x 10 pangkat 308
       - complex64   : nilainya sama dengan float32, tapi umumnya digunakan untuk pertihungan yang kompleks dan terdapat penggambaran (seperti statistik)
       - complex128  : nilainya sama dengan float64, tapi umumnya digunakan untuk pertihungan yang kompleks dan terdapat penggambaran (seperti statistik)


7. Tipe data Boolean di golang
   --> Terdapat 2 jenis data Boolean:
       - true artinya Benar
       - false artinya Salah


8. Tipe data String di golang
   --> string adalah kumpulan karakter (huruf, angka, simbol, dll). Jika kalian ingin mengetahui tipe data string, ciri-cirinya adalah
       setiap data ber-tipe string, pasti menggunakan simbol petik dua diawal dan diakhir. Contoh tipe data string: "Agus beli ikan 5 ekor dipasar"

   --> terdapat beberapa function yang sering digunakan untuk tipe data string, seperti:
       - function len: digunakan untuk menghitung jumlah karakter didalam string.
       
         cara pakai:
         -----------------------------------------------------
         len("Agus beli ikan 5 ekor dipasar")    outputnya: 29
         -----------------------------------------------------
         
         note: spasi juga ikut dihitung
   
   --> cara melacak string lewat angka (di golang, dihitung mulai dari 0 bukan 1)
       - "Agus"[2] outputnya: u  hasilnya "u" bukan "g" karena hitunganya dimulai dari 0
                                 ----------
                                    Agus
                                    0123
                                 ----------
       - "Deni"[3] outputnya: i


9. Variable
   --> variable adalah tempat atau wadah yang digunakan untuk menyimpan data. Di golang setiap variable yang dibuat hanya dapat menyimpan
       satu jenis data yang sama. (Beda dengan bahasa pemrograman lainnya, misalnya javascript, python, dll).
   
   --> cara pakai: var namavariablenya tipe-datanya
       ------------------------------------------
       var agus string
       
       agus = "agus kurnia"
       fmt.Println(agus)   outputnya: agus kurnia
       -------------------------------------------
       
   --> Bisa juga langsung buat variable tanpa perlu di deklarasikan tipe datanya
       ------------------------------------------
       var agus = "agus kurnia"
       fmt.Println(agus)   outputnya: agus kurnia
       ------------------------------------------
       
   --> Untuk tipe data number, lebih baik sebutkan secara spesifik, tipe data apa yang digunakan di variable nya.
       Tujuannya, agar variablenya menggunakan tipe data sesuai nilai minimum dan maksimumnya (alasan lainnya, agar tidak membebani kinerja memori).
       Kalau tidak disebutkan, tipe data integernya akan mengikuti sesuai tipe data koomputer. komputer 32 bit, maka int32
       komputer 64 bit, maka int64.
       ------------------------------------------
       var age uint8 = 27
       fmt.Println(age)    outputnya: 27
       ------------------------------------------
       
   --> Membuat variable tanpa harus menggunakan kata "var" bisa dilakukan jika menggunakan titik dua :
       ----------------------------
       namaku := "agus kurnia"
       fmt.Println(namaku)    outputnya: agus kurnia
       
       namaku = "denny santos"
       fmt.Println(namaku)    outputnya: denny santos
       ----------------------------
       
       - kelemahan menggunakan ini adalah, kita tidak dapat mendeklarasikan tipe datanya. misalnya, age int8 := 18   outputnya: error
       
   --> Multiple variable
       ------------------------------------------------------------------
       var (
         firstname = "agus"
         lastname = "kurnia"
         age = 27
       )
       
       fmt.Println(firstname, lastname, age)    outputnya: agus kurnia 27
       ------------------------------------------------------------------
       
   --> Constant variable
       variable yang tidak dapat diubah jika sudah di deklarasikan. Ini mirip dengan variable constant di python (jika anda pernah mempelajarinya)
       -----------------------------------------
       const namaku = "agus"
       
       // error nilainya jika diubah
       const namaku = "deny"     outputnya: error
       ------------------------------------------
       
   --> Multipe constant variable
       ------------------------------------------------------------------
       const (
         firstname = "deny"
         lastname = "santos"
         age = 19
       )
       
       fmt.Println(firstname, lastname, age)    outputnya: deny santos 19
       ------------------------------------------------------------------


10. Konversi tipe data
      --> Konversi tipe data digunakan untuk mengubah tipe data dari variable tertentu. Misalnya int8 diubah ke int32 atau uint16, dst
          ------------------------------------------------------------------------------
          var statistik1 int8 = 100
          var perbarui_statistik1 int16 = int16(statistik1)   -> nilai maksnya bertambah

          var namaku = "agus"
          var indeks_nama = string(namaku[2])
          fmt.Println(indeks_nama)              outputnya: u
          ------------------------------------------------------------------------------


11. Tipe deklarasi atau type deklarations
      --> tipe deklarasi adalah kemampuan untuk membuat ulang tipe data baru dari tipe data yang sudah ada sebelumnya. Umumnya ini digunakan
          untuk membuat alias (persamaan lain) dari tipe data, dengan tujuan membuat tipe datanya lebih mudah untuk dipahami.

          Contoh: Membuat alias untuk tipe data string, int8, dan boolean
          -------------------------------------
          type karakter string

          cara pakai:
          var namaku karakter = "agus"
          fmt.Println(namaku)    output: agus

          type maks 255 uint8

          var jumlah_siswa maks = 200
          fmt.Println(jumlah_siswa) output: 200
          --------------------------------------


12. Operator matematika
      --> operasi matematika di golang, sama seperti bahasa pemrograman lainnya.

          + untuk penjumlahan
          - untuk pengurangan
          / untuk pembagian
          * untuk perkalian
          % untuk sisa pembagian atau modulus

          ----------------------------------------
          var a = 10
          var b = 20
          var hasil_jumlah = a + b
          fmt.Println(hasil_jumlah)     output: 30

          var a = 2
          var b = 5
          var hasil_kali = a * b
          fmt.Println(hasil_kali)       output: 10
          ----------------------------------------

      --> Menyingkat operasi (berlaku jika variable sebelumnya sudah ada)
          ---------------------------------
          a = 5
          a += 1  ==> sama dengan a = a + 1
          fmt.Println(a)      output: 6

          b = 5
          b -= 1  ==> sama dengan b = b - 1
          fmt.Println(a)      output: 4
          ---------------------------------


 13. Unary operator
      --> unary operator adalah cara cepat atau bisa kalian anggap jalan pintas dalam menggunakan operator, yang dimaksud operator adalah seperti
          penjumlahan, pengurangan, negatif, positif, dan kebalikan dari suatu nilai boolean.

          ++ bertambah 1
          -- berkurang 1
          - negatif
          + positif
          ! kebalikan boolen  ==>   !true jika dibaca artinya adalah bukan true (berarti kebalikannya true, yaitu false)
                                    !false jika dibaca artinya adalah bukan false (berarti kebalikannya false, yaitu true)

          ------------------------------
          var a = 10
          fmt.Println(a)      output: 10

          a++
          fmt.Println(a)      output: 11
          ------------------------------


14. Operator Perbandingan
      --> Operator perbandingan adalah kemampuan untuk membandingkan antara satu angka dengan angka lain atau satu kondisi dengan kondisi lainnya.
          
          > lebih dari
          < kurang dari
          >= lebih dari sama dengan
          <= kurang dari sama dengan
          == sama dengan
          != tidak sama dengan
          
          - Nilai yang dihasilkan dari perbandingan akan selalu bernilai boolean, yaitu true atau false
          -------------------------------------------------------------------------------------------------------------
          cara pakai:
          1 > 2   output: false atau salah
          1 < 2   output: true atau benar
          
          12 >= 10   output: true, karena 10 lebih dari 12
          10 >= 10   output: true, karena 10 juga sama dengan 10
          10 >= 12   output: false, karena 10 tidak lebih dari atau tidak sama dengan 12
          
          10 <= 10   output: true, karena 10 juga sama dengan 10
          12 <= 10   output: false, karena 12 tidak lebih dari 12
          10 <= 12   output: true, karena 10 memang kurang dari 12
          
          var nama1 = "agus"
          var nama2 = "agus"
          var apakah_sama = nama1 == nama2
          fmt.Println(apakah_sama)            output: true, karena namanya sama sama agus dan tidak ada perbedaan huruf
          
          var value1 = 10
          var value2 = 20
          var value1_dan_value2 = value1 != value2
          fmt.Println(value1_dan_value2)           output: true, karena value1 (10) tidak sama dengan value2 (20)
          ---------------------------------------------------------------------------------------------------------------


15. Operator perbandingan khusus untuk tipe data Boolean
      --> Tipe data Boolean mempunyai 3 jenis operator khusus (tipe data lainnya seperti string, number tidak dapat menggunakannya)
          - && artinya AND (dalam bahasa indonesia artinya dan)
          - || artinya OR (dalam bahasa indonesia artinya atau)
          - !  artinya NOT (dalam bahasa indonesia artinya tidak)
          
          / operator && akan bernilai true "jika kedua perbandingan bernilai true atau benar" /
            --------------------------------------
            contoh 1:
                     (10 > 5) && (5 < 10)
                        true        true
                      
            output: true, karena dua-duanya true
            --------------------------------------
            contoh 2:
                     (10 > 1) && (10 < 1)
                        true       false
                           
            output: false, karena salah satu false
            --------------------------------------
            
            
          / operator || akan bernilai true "jika salah satu dari perbandingan bernilai true atau benar" /
            ------------------------------------------------------------------------
            contoh 1:
                     (1 == 1) || (10 > 11)
                       true        false
            
            output: true, karena salah satu true
            ------------------------------------------------------------------------
            contoh 2:
                     (1 < 1) || (1 == 2)
                       false      false
                       
            output: false, karena tidak ada yang true dari kedua perbandingan diatas
            ------------------------------------------------------------------------
            
            
          / operator ! akan bernilai true "jika perbandingan adalah salah atau false" /
            -----------------------------------------------------------------------
            contoh 1:
                     !(1 > 2)
                       false
                     
            output: true, karena dari perbandingan 1 dengan 2, hasilnya false
            -----------------------------------------------------------------------
            contoh 2:
                     !((1 > 1) || (1 < 1))
                        false      false
            
            output: true, karena dari kedua perbandingan OR diatas, hasilnya false
            -----------------------------------------------------------------------
            contoh 3:
                     !((1 == 1) && (2 > 1))
                         true       true
            
            output: false, karena dari kedua perbandingan AND diatas, hasilnya true
            -----------------------------------------------------------------------
            contoh 4:
                     !((2 >= 1) && (0 > 1))
                         true       false
            
            output: true, karena dari kedua perbandingan AND diatas, hasilnya false
            -----------------------------------------------------------------------
            
            note: Apakah kalian sudah puyeng hehe? jika masih sanggup, lanjuuutttt...


16. Array
      --> Array adalah "kumpulan data". Kumpulan data tersebut haruslah tipe data yang sama.
          ----------------
          var nama [3]string
          
          nama[0] = "deny"
          nama[1] = "agus"
          nama[2] = "dimas"
          
          fmt.Println(nama[0])   output: deny
          fmt.Println(nama[1])   output: agus
          fmt.Println(nama[2])   output: dimas
      
      --> cara cepat membuat array
          --------------------------------------------------------
          var angka = [5]int8 {
            10,
            20,
            30,
            40,
            50,
          }
          
          
          fmt.Println(angka)        output: { 10, 20, 30, 40, 50 }
          
          / ATAU /
          
          fmt.Println(angka[0])     output: 10
          fmt.Println(angka[1])     output: 20
          fmt.Println(angka[2])     output: 30
          fmt.Println(angka[3])     output: 40
          fmt.Println(angka[4])     output: 50
          ---------------------------------------------------------

           Note: jika kalian tidak tau panjang maks data arraynya, kalian
                 bisa menggunakan ...
                 
                 contoh: var angka = [...]int16 {
                              16,
                              26,
                              31,
                              283,
                              92,
                         }
           Note: Pastikan kotaknya [], ada isinya! boleh angka atau ...
                 Karena jika kosong, yang kalian buat nantinya bukan Array,
                 melainkan Slice (Baca no. 18 Tipe data slice)

17. Beberapa Function
      -------------------------------------------------------------------------------------------------------------------------------------
      - len(nama_array) ========> digunakan untuk mendapatkan "panjang" data dalam array
      - array[indeks]   ========> digunakan untuk mendapatkan data dalam array, sesuai nomor indeksnya (biasanya digunakan bersamaan dengan Prinln)
      - array[indeks] = value ==> digunakan untuk mengubah data dalam array, sesuai nomor indeksnya
      
      note: "panjang data" berbeda dengan "jumlah indeks dalam array".
            perbedaannya adalah, panjang data dihitung dari 1.
            Sedangkan indeks, dihitung dari 0.
            
            contoh: {10, 20, 30} ==> panjang indeks atau jumlah indeksnya adalah 2 (indeks 0 = 10, indeks 1 = 20, indeks 2 = 30)
                                 ==> panjang datanya adalah 3
      -------------------------------------------------------------------------------------------------------------------------------------
      Function untuk data slice:
      - len(slice)  =========================> panjang slice (dihitung dari 1, bukan 0)
      - cap(slice)  =========================> mendapatkan maks capacity dari data slice
      - append(slice, data)   ===============> memasukkan data yang baru dibuat ke data terakhir dalam slice.
                                               otomatis, juga mengubah data array-nya (bukan cuma slice).
                                               
                                               Kecuali jika data di arraynya mentok, maka data array dan slice gak berubah!
                                               karena otomatis membuat array dan slice baru.
                                               
                                               note: Jika data di induk slice (yaitu array-nya) sudah mentok,
                                                     maka akan membuat array baru dan slice baru.
                                                     
      - make([]TypeData, length, capacity) ==> membuat slice baru {Paling saya rekomendasikan jika membuat slice, karena lebih mudah dalam mengaturnya).
                                               jadi nanti, tinggal di isi slicenya
                                               ----------------------------------------------------
                                               Contoh:
                                               var new_slice = make([]string, 2, 5)
                                               
                                               new_slice[0] = "Adit"
                                               new_slice[1] = "Sopo"
                                               
                                               fmt.Println(new_slice)   output: [Adit Sopo]
                                               ----------------------------------------------------
      - copy(tujuan, source)  ===============> menyalin slice dari sumber atau source ke tujuan.
                                               -----------------------------------------------------------------------------------------------
                                               Contoh:
                                               var new_slice = make([]string, 2, 5)
                                               
                                               new_slice[0] = "Adit"
                                               new_slice[1] = "Sopo"
                                               
                                               fmt.Println(new_slice)   output: [Adit Sopo]
                                               
                                               var copySlice = make([]string, len(new_slice), cap(new_slice))  --> panjang dan kapasitasnya
                                                                                                                   harus sama dengan sourcenya
                                               copySlice = copy(copySlice, new_slice)
                                               
                                               note: alasan gak langsung copySlice = copy(copySlice, new_slice) adalah,
                                                     karena copySlice harus dijadikan slice baru dan diatur len() dan cap() nya sesuai sourcenya
                                               -----------------------------------------------------------------------------------------------
      -----------------------------------------------------------------------------------------------------------------------------------


18. Tipe data slice
      --> Tipe data slice adalah potongan dari data array. Slice mirip dengan array, yang membedakan adalah slice ukurannya dapat berubah.
          Isi data slice adalah sebagian atau seluruh data di array. Sebenarnya, data di slice (dibelakang layar) diambil dari data array.
          Jadi bisa dibilang, slice adalah beberapa atau seluruh data dari array.
          (perlu anda tau, data array tidak dapat berubah atau bertambah. Beda dengan
          data slice ini).
          
      --> Terdapat 3 jenis data di tipe data slice:
          - pointer  : penunjuk data pertama di array para slice
          - length   : panjang dari data slice
          - capacity : kapasitas keseluruhan dari data slice, length "tidak boleh" lebih dari capacity
          
      --> Membuat data slice
          - array[low:high]   : membuat slice dari array, dimulai dari index low sampai index high.
                                 - index low ==> dimulai dari 0
                                 - index high ==> adalah angka sebelum nilai indeks-nya
          - array[low:]       : artinya membuat slice dari array, dimulai dari data slice low sampai,
                                data terakhir dari indeks array.
          - array[:high]      : artinya membuat slice dari array, dimulai dari indeks 0 array, sampai
                                indeks high (diambil dari slice)
          - array[:]          : membuat slice, dimulai dari indeks 0 array (diambil dari array), sampai indeks terakhir array (diambil dari array)
          
          ----------------------------------------------------------------------------------------------------------------------------------------------
          data slice 1
          
          array[4:7] <==   { "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember" }
                  indeksnya:     0           1         2        3       4       5       6        7           8           9          10          11
          
          ket: - pointer   : 4 atau "Mei" (asal 4 adalah 4 dari indeks array)
               - length    : 3 (length diambil dari )
                              4, 5, 6, 7
                              1  2  3  4 = 3
                                          Nilai high adalah nilai yang diambil sebelum indeks terakhirnya.
                                          diatas jika kita hitung, seharusnya panjangnya adalah 4, tetapi
                                          karena definisi nilai high, maka kita "HARUS" mengambil nilai yang sebelumnya,
                                          yaitu 3.
                                          
                                          Saya kurang tau, alasan pembuat golang membuat sesuatu seperti ini,
                                          kenapa tidak menyamakan dengan nilai array saja?
                                           
               - capacity  : 8 (diambil data pertama slice sampai data terakhir di array)
                                 "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember" 
                                   4       5       6        7           8           9          10          11
                                   >-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->
                       [capacity:  1       2       3        4           5           6           7           8]
                        
           Note: - Jika data array diubah, maka semua data slice akan ikut berubah
                 - Jika data slice diubah, maka data dari array ikut berubah dan itu juga akan merubah data di slice lainnya
                 - Satu buah data array, dapat dijadikan satu sampai beberapa data slice
                 - Pelajari nilai high dengan betul!!!
                   saya sendiri awalnya kesulitan untuk mengetahui secara pastinya, karena ini berbeda dengan nilai indeks dari array
                   ataupun panjang array itu sendiri.
                   Kalian bisa mencoba membuat data array, berisi bulan seperti contoh diatas dan coba buat data slice [0:12] dari
                   data array tersebut. Setelah itu kalian bisa print biasa, print + function len, dan print + function cap dan lihat hasilnya
                   
                   contoh:
                   var slice = arraybulan[0:12]
                   
                   fmt.Println(slice)        output: [januari februari maret april mei juni juli agustus september oktober november desember]
                   fmt.Println(len(slice))   output: 12
                   fmt.Println(cap(slice))   output: 12
          ----------------------------------------------------------------------------------------------------------------------------------------------


19. Tipe data map
      --> Tipe data map adalah kumpulan data yang mirip dengan array dan slice, bedanya, tipe data map dapat kita atur tipe data dari indeksnya
          Misalnya, indeks 0, indeks 1, indeks 2, dan seterusnya, ini adalah tipe data number yang tidak dapat diubah,
          Namun menggunakan tipe data map, kalian dapat mengubah atau mengatur tipe data dari indeksnya.
          
          Biasanya di tipe data map disebut key, bukan indeks
          -----------------------------------------------------------------------------------------------
          cara buat map:
                        var person = map[ubah_tipedata_indeks]tipedata_utk_valuenya {
                              "name"   : "denny",
                              "age"    : "19",
                              "hobby"  : "playing football",
                        }
          
          Contoh:
                  var person = map[string]string {
                        "name"   : "zambfes",
                        "age"    : "24",
                        "hobby"  : "playing basketball",
                  }
                  
                  fmt.Println(person)           output: map[age:24 hobby:playing basketball name:zambfes]
                  fmt.Println(person["age"])    output: 24
                  fmt.Println(person["hobby"])  output: playing basketball
          -----------------------------------------------------------------------------------------------
      
      --> Cara menambahkan data ke tipe data map
          ---------------------------------------------------------------------------------------------------
            var person = map[string]string {
                  "name"   : "zambfes",
                  "age"    : "24",
                  "hobby"  : "playing basketball",
            }

            person["work"] = "freelancer"
            
            fmt.Println(person)     output: map[age:24 hobby:playing basketball name:zambfes work:freelancer]
          -------------------------------------------------------------------------------------------------------------

20. Beberapa function untuk tipe data map
      --> - len(map)                                        : untuk menghitung panjang data dari map
          - nama_map[key]                                   : untuk mengambil data dari map menggunakan key
          - nama_map[key] = value                           : untuk mengubah data dari map
          - make(map[TypeKey]TypeValue)                     : untuk membuat map baru, nanti tinggal isi datanya seperti
                                                              make yang ada di slice (ini hanya cara lainnya)
          - delete(nama_map_yg_ingin_dihapus, key_nya)      : untuk menghapus data map menggunakan key
          
          -------------------------------------------------------------------------------------------------------------
            var person = map[string]string {
                  "name"   : "zambfes",
                  "age"    : "24",
                  "hobby"  : "playing basketball",
            }
            
            fmt.Println(len(person))      output: 3
            delete(person, "hobby")
            fmt.Println(person)           output: map[age:24 name:zamfes]
          ---------------------------------------------------------------
          
21. if ekspression dan else ekspression
      --> if ekspression adalah cara untuk mengendalikan jalannya suatu kode, program atau script.
          kode, program atau script akan dijalankan jika kondisinya sudah terpenuhi atau true.
          -----------------------------------------------------------------------
          var nama = "denny"
          
          if nama == "denny" {
            fmt.Println("benar")
          }
          
          cara bacanya: jika variable nama sama dengan "denny", maka print "benar".
                        script didalam kurung kurawalnya yang akan dijalankan
          ------------------------------------------------------------------------
          Note: Kalau kondisi tidak terpenuhi, maka script yang ada di dalam kurung kurawal, tidak akan dijalankan!
          
      --> else ekspression adalah kebalikannya dari if ekspression. Umumnya else ekspression berada setelah if ekspression.
          cara kerja else ekspression adalah menjalankan kode atau program di dalam kurung kurawal, jika kondisi if tidak terpenuhi.
          ---------------------------------------------------------------------------
          var nama = "denny"
          
          if nama == "joni" {
            fmt.Println("benar")
          } else {
            fmt.Println("salah")
          }
          
          outputnya: "salah", karena kondisi if ekspression tidak terpenuhi.
          ---------------------------------------------------------------------------
          
      --> else if ekspression memiliki fungsi yang sama seperti if ekspression, ini digunakan jika kalian membutuhkan banyak if
          dengan kondisi yang berbeda-beda.
          ---------------------------------------------------------------------------
          var nama = "denny"
          
          if nama == "joni" {
            fmt.Println("kondisi 1 terpenuhi")
          } else if nama == "denny" {
            fmt.Println("kondisi 2 terpenuhi")
          } else {
            fmt.Println("kondisi tidak terpenuhi")
          }
          
          output: "kondisi 2 terpenuhi"
          ---------------------------------------------------------------------------
          
22. if short statement
      --> if short statement adalah cara cepat dalam membuat if ekspression. Cara ini banyak digunakan
          untuk mengecek suatu kondisi tertentu.
          kalian bisa membuat variable di yang memiliki if ekspression.
          --------------------------------------------------------------
          if check_length := len(name); check_length > 5 {
               fmt.Println("Nama terlalu panjang")
          } else {
               fmt.Println("Nama yang dimasukkan benar")
          }
          
          
          if ekspression diatas jika dibuat if ekspression biasa, maka akan terlihat seperti
          var check_length = len(name)
          
          if check_length > 5 {
               fmt.Println("Nama terlalu panjang")
          } else {
               fmt.Println("Nama yang dimasukkan benar")
          }
          ---------------------------------------------------------------
