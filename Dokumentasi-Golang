install golang versi terbaru. Download dan install di website resminya -> https://go.dev/doc/install
Ikuti instruksi yang diberikan di website golang

1. Membuat file golang
   --> buat folder khusus golang
   --> touch hello.go
 
 
 2. Menulis hello world
   --> sudo nano hello.go
   --> isi filenya yaitu:
   ------------------------------
   package main
   
   import "fmt"
   
   func main() {
      fmt.Println("Hello World")
   }
   ------------------------------

   ket: - "package main", dan func main adalah perintah wajib untuk setiap file golang
        - "fmt" digunakan untuk melakukan print
        

3. Jalankan filenya
   --> go run hello.go
   --> perintah "go run namafile.go" hanya direkomendasikan untuk mencoba menjalankan file golang
       yang masih tahap development atau masih dalam tahap uji coba. Jika sudah selesai, kalian
       harus melakukan yang namanya "compile" dan hasil compile filenya yang akan digunakan!!


4. Compile file go
   --> go build hello.go
   --> hasilnya adalah file yang sama, yaitu file dengan nama hello (ekstensi .go telah dihilangkan)


5. Jalankan file go
   --> ./hello atau sudo ./hello


6. Tipe data number di Golang
   --> Terdapat 2 jenis angka di golang:
       - integer: angka biasa 1, 2, 3, 4, dst
       - floating point: angka dengan koma 1.8, 2.5, 6.7
         { titik disitu adalah koma (saya tulis sama seperti format kalkulator, agar lebih mudah) }
         
   --> "Integer" dibagi lagi ke dalam 8 jenis tipe data:
       - int8  : untuk angka -128 sampai maksimumnya 127
       - int16 : untuk angka -32768 sampai maksimumnya 32767
       - int32 : untuk angka -2147483648 sampai maksimumnya 2147483647 (sekitar -2 sekian miliar sampai 2 sekian miliar)
       - int64 : untuk angka -9223372036854775808 sampai maks 9223372036854775807
                 (sekitar -9 sekian Kuantiliun sampai 9 sekian Kuantiliun). Kuantiliun (biasanya disebut angka dengan nol 18),
                 ini sebutan angka diatas kuadtriliun
       - uint8  : untuk angka 0 sampai maks 255
       - uint16 : untuk angka 0 sampai maks 65535
       - uint32 : untuk angka 0 sampai maks 4294967295
       - uint64 : untuk angka 0 sampai maks 18446744073709551615 (sekitar 18 Kuantiliun)
         { Sesuaikan dengan kebutuhan kalian. Misalnya untuk data ujian siswa, gunakan int8 (karena dibawah 127).
           Kalau tidak sesuai, akan membebani kinerja dan jadi sia-sia }
           
   --> "Floating point" dibagi menjadi 4 tipe data:
       - float32     : 1.18 x 10 pangkat -38 maksnya 3.4 x 10 pangkat 38
       - float64     : 2.23 x 10 pangkat -308 maksnya 1.80 x 10 pangkat 308
       - complex64   : nilainya sama dengan float32, tapi umumnya digunakan untuk pertihungan yang kompleks dan terdapat penggambaran (seperti statistik)
       - complex128  : nilainya sama dengan float64, tapi umumnya digunakan untuk pertihungan yang kompleks dan terdapat penggambaran (seperti statistik)


7. Tipe data Boolean di golang
   --> Terdapat 2 jenis data Boolean:
       - true artinya Benar
       - false artinya Salah


8. Tipe data String di golang
   --> string adalah kumpulan karakter (huruf, angka, simbol, dll). Jika kalian ingin mengetahui tipe data string, ciri-cirinya adalah
       setiap data ber-tipe string, pasti menggunakan simbol petik dua diawal dan diakhir. Contoh tipe data string: "Agus beli ikan 5 ekor dipasar"

   --> terdapat beberapa function yang sering digunakan untuk tipe data string, seperti:
       - function len: digunakan untuk menghitung jumlah karakter didalam string.
       
         cara pakai:
         -----------------------------------------------------
         len("Agus beli ikan 5 ekor dipasar")    outputnya: 29
         -----------------------------------------------------
         
         note: spasi juga ikut dihitung
   
   --> cara melacak string lewat angka (di golang, dihitung mulai dari 0 bukan 1)
       - "Agus"[2] outputnya: u  hasilnya "u" bukan "g" karena hitunganya dimulai dari 0
                                 ----------
                                    Agus
                                    0123
                                 ----------
       - "Deni"[3] outputnya: i


9. Variable
   --> variable adalah tempat atau wadah yang digunakan untuk menyimpan data. Di golang setiap variable yang dibuat hanya dapat menyimpan
       satu jenis data yang sama. (Beda dengan bahasa pemrograman lainnya, misalnya javascript, python, dll).
   
   --> cara pakai: var namavariablenya tipe-datanya
       ------------------------------------------
       var agus string
       
       agus = "agus kurnia"
       fmt.Println(agus)   outputnya: agus kurnia
       -------------------------------------------
       
   --> Bisa juga langsung buat variable tanpa perlu di deklarasikan tipe datanya
       ------------------------------------------
       var agus = "agus kurnia"
       fmt.Println(agus)   outputnya: agus kurnia
       ------------------------------------------
       
   --> Untuk tipe data number, lebih baik sebutkan secara spesifik, tipe data apa yang digunakan di variable nya.
       Tujuannya, agar variablenya menggunakan tipe data sesuai nilai minimum dan maksimumnya (alasan lainnya, agar tidak membebani kinerja memori).
       Kalau tidak disebutkan, tipe data integernya akan mengikuti sesuai tipe data koomputer. komputer 32 bit, maka int32
       komputer 64 bit, maka int64.
       ------------------------------------------
       var age uint8 = 27
       fmt.Println(age)    outputnya: 27
       ------------------------------------------
       
   --> Membuat variable tanpa harus menggunakan kata "var" bisa dilakukan jika menggunakan titik dua :
       ----------------------------
       namaku := "agus kurnia"
       fmt.Println(namaku)    outputnya: agus kurnia
       
       namaku = "denny santos"
       fmt.Println(namaku)    outputnya: denny santos
       ----------------------------
       
       - kelemahan menggunakan ini adalah, kita tidak dapat mendeklarasikan tipe datanya. misalnya, age int8 := 18   outputnya: error
       
   --> Multiple variable
       ------------------------------------------------------------------
       var (
         firstname = "agus"
         lastname = "kurnia"
         age = 27
       )
       
       fmt.Println(firstname, lastname, age)    outputnya: agus kurnia 27
       ------------------------------------------------------------------
       
   --> Constant variable
       variable yang tidak dapat diubah jika sudah di deklarasikan. Ini mirip dengan variable constant di python (jika anda pernah mempelajarinya)
       -----------------------------------------
       const namaku = "agus"
       
       // error nilainya jika diubah
       const namaku = "deny"     outputnya: error
       ------------------------------------------
       
   --> Multipe constant variable
       ------------------------------------------------------------------
       const (
         firstname = "deny"
         lastname = "santos"
         age = 19
       )
       
       fmt.Println(firstname, lastname, age)    outputnya: deny santos 19
       ------------------------------------------------------------------


10. Konversi tipe data
      --> Konversi tipe data digunakan untuk mengubah tipe data dari variable tertentu. Misalnya int8 diubah ke int32 atau uint16, dst
          ------------------------------------------------------------------------------
          var statistik1 int8 = 100
          var perbarui_statistik1 int16 = int16(statistik1)   -> nilai maksnya bertambah

          var namaku = "agus"
          var indeks_nama = string(namaku[2])
          fmt.Println(indeks_nama)              outputnya: u
          ------------------------------------------------------------------------------


11. Tipe deklarasi atau type deklarations
      --> tipe deklarasi adalah kemampuan untuk membuat ulang tipe data baru dari tipe data yang sudah ada sebelumnya. Umumnya ini digunakan
          untuk membuat alias (persamaan lain) dari tipe data, dengan tujuan membuat tipe datanya lebih mudah untuk dipahami.

          Contoh: Membuat alias untuk tipe data string, int8, dan boolean
          -------------------------------------
          type karakter string

          cara pakai:
          var namaku karakter = "agus"
          fmt.Println(namaku)    output: agus

          type maks 255 uint8

          var jumlah_siswa maks = 200
          fmt.Println(jumlah_siswa) output: 200
          --------------------------------------


12. Operator matematika
      --> operasi matematika di golang, sama seperti bahasa pemrograman lainnya.

          + untuk penjumlahan
          - untuk pengurangan
          / untuk pembagian
          * untuk perkalian
          % untuk sisa pembagian atau modulus

          ----------------------------------------
          var a = 10
          var b = 20
          var hasil_jumlah = a + b
          fmt.Println(hasil_jumlah)     output: 30

          var a = 2
          var b = 5
          var hasil_kali = a * b
          fmt.Println(hasil_kali)       output: 10
          ----------------------------------------

      --> Menyingkat operasi (berlaku jika variable sebelumnya sudah ada)
          ---------------------------------
          a = 5
          a += 1  ==> sama dengan a = a + 1
          fmt.Println(a)      output: 6

          b = 5
          b -= 1  ==> sama dengan b = b - 1
          fmt.Println(a)      output: 4
          ---------------------------------


 13. Unary operator
      --> unary operator adalah cara cepat atau bisa kalian anggap jalan pintas dalam menggunakan operator, yang dimaksud operator adalah seperti
          penjumlahan, pengurangan, negatif, positif, dan kebalikan dari suatu nilai boolean.

          ++ bertambah 1
          -- berkurang 1
          - negatif
          + positif
          ! kebalikan boolen  ==>   !true jika dibaca artinya adalah bukan true (berarti kebalikannya true, yaitu false)
                                    !false jika dibaca artinya adalah bukan false (berarti kebalikannya false, yaitu true)

          ------------------------------
          var a = 10
          fmt.Println(a)      output: 10

          a++
          fmt.Println(a)      output: 11
          ------------------------------


14. Operator Perbandingan
      --> Operator perbandingan adalah kemampuan untuk membandingkan antara satu angka dengan angka lain atau satu kondisi dengan kondisi lainnya.
          
          > lebih dari
          < kurang dari
          >= lebih dari sama dengan
          <= kurang dari sama dengan
          == sama dengan
          != tidak sama dengan
          
          - Nilai yang dihasilkan dari perbandingan akan selalu bernilai boolean, yaitu true atau false
          -------------------------------------------------------------------------------------------------------------
          cara pakai:
          1 > 2   output: false atau salah
          1 < 2   output: true atau benar
          
          12 >= 10   output: true, karena 10 lebih dari 12
          10 >= 10   output: true, karena 10 juga sama dengan 10
          10 >= 12   output: false, karena 10 tidak lebih dari atau tidak sama dengan 12
          
          10 <= 10   output: true, karena 10 juga sama dengan 10
          12 <= 10   output: false, karena 12 tidak lebih dari 12
          10 <= 12   output: true, karena 10 memang kurang dari 12
          
          var nama1 = "agus"
          var nama2 = "agus"
          var apakah_sama = nama1 == nama2
          fmt.Println(apakah_sama)            output: true, karena namanya sama sama agus dan tidak ada perbedaan huruf
          
          var value1 = 10
          var value2 = 20
          var value1_dan_value2 = value1 != value2
          fmt.Println(value1_dan_value2)           output: true, karena value1 (10) tidak sama dengan value2 (20)
          ---------------------------------------------------------------------------------------------------------------


15. Operator perbandingan khusus untuk tipe data Boolean
      --> Tipe data Boolean mempunyai 3 jenis operator khusus (tipe data lainnya seperti string, number tidak dapat menggunakannya)
          - && artinya AND (dalam bahasa indonesia artinya dan)
          - || artinya OR (dalam bahasa indonesia artinya atau)
          - !  artinya NOT (dalam bahasa indonesia artinya tidak)
          
          / operator && akan bernilai true "jika kedua perbandingan bernilai true atau benar" /
            --------------------------------------
            contoh 1:
                     (10 > 5) && (5 < 10)
                        true        true
                      
            output: true, karena dua-duanya true
            --------------------------------------
            contoh 2:
                     (10 > 1) && (10 < 1)
                        true       false
                           
            output: false, karena salah satu false
            --------------------------------------
            
            
          / operator || akan bernilai true "jika salah satu dari perbandingan bernilai true atau benar" /
            ------------------------------------------------------------------------
            contoh 1:
                     (1 == 1) || (10 > 11)
                       true        false
            
            output: true, karena salah satu true
            ------------------------------------------------------------------------
            contoh 2:
                     (1 < 1) || (1 == 2)
                       false      false
                       
            output: false, karena tidak ada yang true dari kedua perbandingan diatas
            ------------------------------------------------------------------------
            
            
          / operator ! akan bernilai true "jika perbandingan adalah salah atau false" /
            -----------------------------------------------------------------------
            contoh 1:
                     !(1 > 2)
                       false
                     
            output: true, karena dari perbandingan 1 dengan 2, hasilnya false
            -----------------------------------------------------------------------
            contoh 2:
                     !((1 > 1) || (1 < 1))
                        false      false
            
            output: true, karena dari kedua perbandingan OR diatas, hasilnya false
            -----------------------------------------------------------------------
            contoh 3:
                     !((1 == 1) && (2 > 1))
                         true       true
            
            output: false, karena dari kedua perbandingan AND diatas, hasilnya true
            -----------------------------------------------------------------------
            contoh 4:
                     !((2 >= 1) && (0 > 1))
                         true       false
            
            output: true, karena dari kedua perbandingan AND diatas, hasilnya false
            -----------------------------------------------------------------------
            
            note: Apakah kalian sudah puyeng hehe? jika masih sanggup, lanjuuutttt...


16. Array
      --> Array adalah "kumpulan data". Kumpulan data tersebut haruslah tipe data yang sama.
          ----------------
          var nama [3]string
          
          nama[0] = "deny"
          nama[1] = "agus"
          nama[2] = "dimas"
          
          fmt.Println(nama[0])   output: deny
          fmt.Println(nama[1])   output: agus
          fmt.Println(nama[2])   output: dimas
      
      --> cara cepat membuat array
          --------------------------------------------------------
          var angka = [5]int8 {
            10,
            20,
            30,
            40,
            50,
          }
          
          
          fmt.Println(angka)        output: { 10, 20, 30, 40, 50 }
          
          / ATAU /
          
          fmt.Println(angka[0])     output: 10
          fmt.Println(angka[1])     output: 20
          fmt.Println(angka[2])     output: 30
          fmt.Println(angka[3])     output: 40
          fmt.Println(angka[4])     output: 50
          ---------------------------------------------------------

           Note: jika kalian tidak tau panjang maks data arraynya, kalian
                 bisa menggunakan ...
                 
                 contoh: var angka = [...]int16 {
                              16,
                              26,
                              31,
                              283,
                              92,
                         }
           Note: Pastikan kotaknya [], ada isinya! boleh angka atau ...
                 Karena jika kosong, yang kalian buat nantinya bukan Array,
                 melainkan data bertipe Slice (Baca no. 18 Tipe data slice)

17. Beberapa Function
      -------------------------------------------------------------------------------------------------------------------------------------
      - len(nama_array) ========> digunakan untuk mendapatkan "panjang" data dalam array
      - array[indeks]   ========> digunakan untuk mendapatkan data dalam array, sesuai nomor indeksnya (biasanya digunakan bersamaan dengan Prinln)
      - array[indeks] = value ==> digunakan untuk mengubah data dalam array, sesuai nomor indeksnya
      
      note: "panjang data" berbeda dengan "jumlah indeks dalam array".
            perbedaannya adalah, panjang data dihitung dari 1.
            Sedangkan indeks, dihitung dari 0.
            
            contoh: {10, 20, 30} ==> panjang indeks atau jumlah indeksnya adalah 2 (indeks 0 = 10, indeks 1 = 20, indeks 2 = 30)
                                 ==> panjang datanya adalah 3
      -------------------------------------------------------------------------------------------------------------------------------------
      Function untuk data slice:
      - len(slice)  =========================> panjang slice (dihitung dari 1, bukan 0)
      - cap(slice)  =========================> mendapatkan maks capacity dari data slice
      - append(slice, data)   ===============> memasukkan data yang baru dibuat ke data terakhir dalam slice.
                                               otomatis, juga mengubah data array-nya (bukan cuma slice).
                                               
                                               Kecuali jika data di arraynya mentok, maka data array dan slice gak berubah!
                                               karena otomatis membuat array dan slice baru.
                                               
                                               note: Jika data di induk slice (yaitu array-nya) sudah mentok,
                                                     maka akan membuat array baru dan slice baru.
                                                     
      - make([]TypeData, length, capacity) ==> membuat slice baru.
                                               jadi nanti, tinggal di isi slicenya
                                               ----------------------------------------------------
                                               Contoh:
                                               var new_slice = make([]string, 2, 5)
                                               
                                               new_slice[0] = "Adit"
                                               new_slice[1] = "Sopo"
                                               
                                               fmt.Println(new_slice)   output: [Adit Sopo]
                                               ----------------------------------------------------
      - copy(tujuan, source)  ===============> menyalin slice dari sumber atau source ke tujuan.
                                               -----------------------------------------------------------------------------------------------
                                               Contoh:
                                               var new_slice = make([]string, 2, 5)
                                               
                                               new_slice[0] = "Adit"
                                               new_slice[1] = "Sopo"
                                               
                                               fmt.Println(new_slice)   output: [Adit Sopo]
                                               
                                               var copySlice = make([]string, len(new_slice), cap(new_slice))  --> panjang dan kapasitasnya
                                                                                                                   harus sama dengan sourcenya
                                               copySlice = copy(copySlice, new_slice)
                                               
                                               note: alasan gak langsung copySlice = copy(copySlice, new_slice) adalah,
                                                     karena copySlice harus dijadikan slice baru dan diatur len() dan cap() nya sesuai sourcenya
                                               -----------------------------------------------------------------------------------------------
      -----------------------------------------------------------------------------------------------------------------------------------


18. Tipe data slice
      --> Tipe data slice adalah potongan dari data array. Slice mirip dengan array, yang membedakan adalah slice ukurannya dapat berubah.
          Isi data slice adalah sebagian atau seluruh data di array. Sebenarnya, data di slice (dibelakang layar) diambil dari data array.
          Jadi bisa dibilang, slice adalah beberapa atau seluruh data dari array.
          (perlu anda tau, data array tidak dapat berubah atau bertambah. Beda dengan
          data slice ini).
          
      --> Terdapat 3 jenis data di tipe data slice:
          - pointer  : penunjuk data pertama di array para slice
          - length   : panjang dari data slice
          - capacity : kapasitas keseluruhan dari data slice, length "tidak boleh" lebih dari capacity
          
      --> Membuat data slice
          - array[low:high]   : membuat slice dari array, dimulai dari index low sampai index high.
                                 - index low ==> dimulai dari 0
                                 - index high ==> adalah angka sebelum nilai indeks-nya
          - array[low:]       : artinya membuat slice dari array, dimulai dari data slice low sampai,
                                data terakhir dari indeks array.
          - array[:high]      : artinya membuat slice dari array, dimulai dari indeks 0 array, sampai
                                indeks high (diambil dari slice)
          - array[:]          : membuat slice, dimulai dari indeks 0 array (diambil dari array), sampai indeks terakhir array (diambil dari array)
          
          ----------------------------------------------------------------------------------------------------------------------------------------------
          data slice 1
          
          array[4:7] <==   { "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember" }
                  indeksnya:     0           1         2        3       4       5       6        7           8           9          10          11
          
          ket: - pointer   : 4 atau "Mei" (asal 4 adalah 4 dari indeks array)
               - length    : 3 (length diambil dari )
                              4, 5, 6, 7
                              1  2  3  4 = 3
                                          Nilai high adalah nilai yang diambil sebelum indeks terakhirnya.
                                          diatas jika kita hitung, seharusnya panjangnya adalah 4, tetapi
                                          karena definisi nilai high, maka kita "HARUS" mengambil nilai yang sebelumnya,
                                          yaitu 3.
                                          
                                          Saya kurang tau, alasan pembuat golang membuat sesuatu seperti ini,
                                          kenapa tidak menyamakan dengan nilai array saja?
                                           
               - capacity  : 8 (diambil data pertama slice sampai data terakhir di array)
                                 "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember" 
                                   4       5       6        7           8           9          10          11
                                   >-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->
                       [capacity:  1       2       3        4           5           6           7           8]
                        
           Note: - Jika data array diubah, maka semua data slice akan ikut berubah
                 - Jika data slice diubah, maka data dari array ikut berubah dan itu juga akan merubah data di slice lainnya
                 - Satu buah data array, dapat dijadikan satu sampai beberapa data slice
                 - Pelajari nilai high dengan betul!!!
                   saya sendiri awalnya kesulitan untuk mengetahui secara pastinya, karena ini berbeda dengan nilai indeks dari array
                   ataupun panjang array itu sendiri.
                   Kalian bisa mencoba membuat data array, berisi bulan seperti contoh diatas dan coba buat data slice [0:12] dari
                   data array tersebut. Setelah itu kalian bisa print biasa, print + function len, dan print + function cap dan lihat hasilnya
                   
                   contoh:
                   var slice = arraybulan[0:12]
                   
                   fmt.Println(slice)        output: [januari februari maret april mei juni juli agustus september oktober november desember]
                   fmt.Println(len(slice))   output: 12
                   fmt.Println(cap(slice))   output: 12
          ----------------------------------------------------------------------------------------------------------------------------------------------
          Rekomendasi: Biar cepat, gunakan cara dibawah ini untuk membuat data slice.
                       Caranya mirip seperti membuat data tipe Array, bedanya hanya di bagian kurung kotak []
                       -------------------------------------------------
                       Cara Buat:

                       var slice = []string {
                         "apel",
                         "anggur",
                         "pisang",
                       }
                       
                       fmt.Println(slice)    output: [apel anggur pisang]
                       --------------------------------------------------
         
         

19. Tipe data map
      --> Tipe data map adalah kumpulan data yang mirip dengan array dan slice, bedanya, tipe data map dapat kita atur tipe data dari indeksnya
          Misalnya, indeks 0, indeks 1, indeks 2, dan seterusnya, ini adalah tipe data number yang tidak dapat diubah,
          Namun menggunakan tipe data map, kalian dapat mengubah atau mengatur tipe data dari indeksnya.
          
          Biasanya di tipe data map disebut key, bukan indeks
          -----------------------------------------------------------------------------------------------
          cara buat map:
                        var person = map[ubah_tipedata_indeks]tipedata_utk_valuenya {
                              "name"   : "denny",
                              "age"    : "19",
                              "hobby"  : "playing football",
                        }
          
          Contoh:
                  var person = map[string]string {
                        "name"   : "zambfes",
                        "age"    : "24",
                        "hobby"  : "playing basketball",
                  }
                  
                  fmt.Println(person)           output: map[age:24 hobby:playing basketball name:zambfes]
                  fmt.Println(person["age"])    output: 24
                  fmt.Println(person["hobby"])  output: playing basketball
          -----------------------------------------------------------------------------------------------
      
      --> Cara menambahkan data ke tipe data map
          ---------------------------------------------------------------------------------------------------
            var person = map[string]string {
                  "name"   : "zambfes",
                  "age"    : "24",
                  "hobby"  : "playing basketball",
            }

            person["work"] = "freelancer"
            
            fmt.Println(person)     output: map[age:24 hobby:playing basketball name:zambfes work:freelancer]
          -------------------------------------------------------------------------------------------------------------

20. Beberapa function untuk tipe data map
      --> - len(map)                                        : untuk menghitung panjang data dari map
          - nama_map[key]                                   : untuk mengambil data dari map menggunakan key
          - nama_map[key] = value                           : untuk mengubah data dari map
          - make(map[TypeKey]TypeValue)                     : untuk membuat map baru, nanti tinggal isi datanya seperti
                                                              make yang ada di slice (ini hanya cara lainnya)
          - delete(nama_map_yg_ingin_dihapus, key_nya)      : untuk menghapus data map menggunakan key
          
          -------------------------------------------------------------------------------------------------------------
            var person = map[string]string {
                  "name"   : "zambfes",
                  "age"    : "24",
                  "hobby"  : "playing basketball",
            }
            
            fmt.Println(len(person))      output: 3
            delete(person, "hobby")
            fmt.Println(person)           output: map[age:24 name:zamfes]
          ---------------------------------------------------------------
          
21. if expression dan else expression
      --> if expression adalah cara untuk mengendalikan jalannya suatu kode, program atau script.
          kode, program atau script akan dijalankan jika kondisinya sudah terpenuhi atau true.
          -----------------------------------------------------------------------
          var nama = "denny"
          
          if nama == "denny" {
            fmt.Println("benar")
          }
          
          cara bacanya: jika variable nama sama dengan "denny", maka print "benar".
                        script didalam kurung kurawalnya yang akan dijalankan
          ------------------------------------------------------------------------
          Note: Kalau kondisi tidak terpenuhi, maka script yang ada di dalam kurung kurawal, tidak akan dijalankan!
          
      --> else expression adalah kebalikannya dari if expression. Umumnya else expression berada setelah if expression.
          cara kerja else expression adalah menjalankan kode atau program di dalam kurung kurawal, jika kondisi if tidak terpenuhi.
          ---------------------------------------------------------------------------
          var nama = "denny"
          
          if nama == "joni" {
            fmt.Println("benar")
          } else {
            fmt.Println("salah")
          }
          
          outputnya: "salah", karena kondisi if expression tidak terpenuhi.
          ---------------------------------------------------------------------------
          
      --> else if expression memiliki fungsi yang sama seperti if expression, ini digunakan jika kalian membutuhkan banyak if
          dengan kondisi yang berbeda-beda.
          ---------------------------------------------------------------------------
          var nama = "denny"
          
          if nama == "joni" {
            fmt.Println("kondisi 1 terpenuhi")
          } else if nama == "denny" {
            fmt.Println("kondisi 2 terpenuhi")
          } else {
            fmt.Println("kondisi tidak terpenuhi")
          }
          
          output: "kondisi 2 terpenuhi"
          ---------------------------------------------------------------------------
          
22. if short statement
      --> if short statement adalah cara cepat dalam membuat if expression. Cara ini banyak digunakan
          untuk mengecek suatu kondisi tertentu.
          kalian bisa membuat variable di yang memiliki if expression.
          --------------------------------------------------------------
          if check_length := len(name); check_length > 5 {
               fmt.Println("Nama terlalu panjang")
          } else {
               fmt.Println("Nama yang dimasukkan benar")
          }
          
          
          if expression diatas jika dibuat if expression biasa, maka akan terlihat seperti
          var check_length = len(name)
          
          if check_length > 5 {
               fmt.Println("Nama terlalu panjang")
          } else {
               fmt.Println("Nama yang dimasukkan benar")
          }
          ---------------------------------------------------------------
          
          Note: Variable yang dibuat di dalam if short statement, hanya dapat digunakan dalam
                lingkup if short statement. Jadi kalau digunakan pada else if, itu bisa!


23. Switch expression
      --> Switch expression adalah versi sederhana dari if expression.
          Switch expression digunakan untuk melakukan pengecekan sederhana dari suatu variable.
          Kalian bahkan hanya perlu satu kurung kurawal dan bisa melakukan banyak pengecekan
          pada satu variable dengan kondisi dan outpun yang dihasilkan berbeda-beda.
          ------------------------------------------------------------------------------------
          var name = "wijayanto"
          
          switch name {
          case "agus":
            fmt.Println("namanya agus")
          case "wijayanto":
            fmt.Println("namanya wijayanto")
          default:
            fmt.Println("siapakah namanya?")
          }
          
          output: "namanya wijayanto"
          
          Note: switch cocok untuk melakukan pengecekan terhadap satu variable dengan kondisi yang berbeda-beda
          
          
          ket:
               - switch untuk melakukan pengecekan terhadap variablenya
               - case digunakan untuk mengecek kondisi dari variablenya,
                 case 1, case 2, case 3, dst ==> artinya kondisi 1, kondisi 2,
                 kondisi 3.
               - default adalah seperti else pada if expression
          ------------------------------------------------------------------------------------
      --> Selain cara diatas, switch expression juga bisa digunakan kosong tanpa variable diawal,
          dan tanpa terikat variable tertentu (kalian bisa memasukkan variable lainnya juga).
          Keuntungan menggunakan cara ini, adalah kalian bisa memasukkan banyak kondisi berbeda,
          terutama jika data yang ingin dicek adalah data tipe number (integer, atau float point)
          ------------------------------------------------------------------------------------
          var angka = 5 * 2 + 1
          
          switch {
          case angka == 10:
            fmt.Println("angka = 10")
          case angka == 11:
            fmt.Println("angka = 11")
          case angka >= 12:
            fmt.Println("angka lebih besar dari 12 atau sama dengan 12")
          case angka <= 9:
            fmt.Println("angka lebih kecil dari 9 atau sama dengan 9")
          default:
            fmt.Println("data bukan angka")
          }
          
          output: "angka = 11"
          ------------------------------------------------------------------------------------
          
          
24. Switch short statement (lewati, karena sama saja dengan if short statement. Bahkan lebih pendek dan enak if short statement!!!)

25. for loop
      --> for loop adalah perulangan. Selama kondisi di for loop terpenuhi, maka kode didalamnya akanselalu berjalan.
      ---------------------------------------------------------------------
      var nama = "agus witoyo"
      var panjang_nama = len(nama)
      
      for panjang_nama > 10 {
         fmt.Println("nama terlalu panjang!")
      }
      
      output:  nama terlalu panjang!
               nama terlalu panjang!
               nama terlalu panjang!
               dan seterusnya... (tidak akan berhenti, sampai script atau program dihentikan)
               
      Note: Pastikan kalian memasukkan kondisi yang terdapat batas pengulangan, agar kode tidak selalu dijalankan terus-menerus alias tanpa henti
            misalnya, seperti kode dibawah ini
            ---------------------------------------------------------------------
            var angka = 1
            
            for angka <= 10 {
               fmt.Println("angkanya adalah", angka)
               angka++
            }
            
            output:  angkanya adalah 1
                     angkanya adalah 2
                     angkanya adalah 3
                     angkanya adalah 4
                     angkanya adalah 5
                     angkanya adalah 6
                     angkanya adalah 7
                     angkanya adalah 8
                     angkanya adalah 9
                     angkanya adalah 10
           ---------------------------------------------------------------------
           
26. for statement
      --> for statement di golang mirip dengan for statement di javascript. Nanti kalian dapat melihat persamaannya,
          terdapat 2 statement di for statement
          - init statement: statement yang di jalankan sebelum for loop di jalankan
          - post statement: statement yang d jalankan di setiap akhir perulangan
          
          ------------------------------------------------------------------------
          visualisasi statement:
          for init_statement := 1; kondisinya; post_statement {
               // kode atau script kalian
          }
          
          contoh penulisan:
          
          for variable;kondisi;increment {
               // kode yang ingin dijalankan
          }
          
          praktek:
          
          for angka := 1; angka <= 20; angka++ {
               fmt.Println("angka sekarang:", angka)
          }
          
          output: angka sekarang: 1
                  angka sekarang: 2
                  angka sekarang: 3
                  angka sekarang: 4
                  angka sekarang: 5
                  angka sekarang: 6
                  angka sekarang: 7
                  angka sekarang: 8
                  angka sekarang: 9
                  angka sekarang: 10
                  angka sekarang: 11
                  angka sekarang: 12
                  angka sekarang: 13
                  angka sekarang: 14
                  angka sekarang: 15
                  angka sekarang: 16
                  angka sekarang: 17
                  angka sekarang: 18
                  angka sekarang: 19
                  angka sekarang: 20
          ------------------------------------------------------------------------
          Contoh lain:
          
          var data = []string {"denny", "budi", "agus", "anton", "eko"}
          
          for i := 0; i < len(data); i++ {
            fmt.Println(i, data[i])
          }
          
          output: 0 denny
                  1 budi
                  2 agus
                  3 anton
                  4 eko
          -------------------------------------------------------------------------

      --> for range adalah cara cepat dan khusus untuk menampilkan data yang terdapat di array, slice, atau map.
          kode dibawah ini adalah cara cepat dari contoh sebelumnya. (Hasilnya sama saja)
          -----------------------------------------------------------------------------------------------------------------------
          var data = []string {"denny", "budi", "agus", "anton", "eko"}
          
          for i, value := range data {                // gak pake ; tapi pake koma ,
            fmt.Println("indeks ke", i, "=", value)
          }
          
          output: indeks ke 0 = denny
                  indeks ke 1 = budi
                  indeks ke 2 = agus
                  indeks ke 3 = anton
                  indeks ke 4 = eko
                  
          kalau kalian tidak ingin menampilkan indeksnya, ganti bagian i dengan _
          karena kalau tidak dipakai i nya, nanti error (Di golang kalau ada variable tidak dipakai, maka akan error saat di run)
          -----------------------------------------------------------------------------------------------------------------------
          
27. Break dan Continue
      --> Apa itu break dan continue?
          - break digunakan untuk menghentikan perulangan atau for loop. Setelah berhenti, maka kode di bawahnya yang dalam tanda kutip
            "masih di dalam lingkup for loop" tidak akan dijalankan.
            -------------------------------------------------------------------------------------------------
            for i := 0; i < 10; i++ {
               if i == 5 {
                  break             ==> stop sampai break, dan Println tidak akan dieksekusi atau di jalankan
               }
               
               fmt.Println("kode ini dijalankan", i)
            }
            
            output: kode ini dijalankan 1
                    kode ini dijalankan 2
                    kode ini dijalankan 3
                    kode ini dijalankan 4
            -------------------------------------------------------------------------------------------------
        --> Continue sedikit berbeda. Jika menemukan continue, maka kode dibawahnya tidak akan dijalankan. Tetapi,
            melanjutkan ke post statement (increment++) dan mengulangi dari awal. Jadi, perulangan tidak sepenuhnya dihentikan!
            -------------------------------------------------------------------------------------------------
            for i := 0; i < 10; i++ {
               if i % 2 == 0 {
                  continue          ==> stop sampai continue, kode println tidak dijalankan ATAU di skip. Tetapi kode
               }                        i++ dijalankan (karena berada diatas continue) dan mengulangi looping lagi
               
               fmt.Println("kode ini dijalankan", i)
            }
            
            output:  kode ini dijalankan 1
                     kode ini dijalankan 3
                     kode ini dijalankan 5
                     kode ini dijalankan 7
                     kode ini dijalankan 9
            -------------------------------------------------------------------------------------------------

28. Membuat Function sendiri
      --> Funcion adalah sebuah paket atau package yang berisi vaiable, kode atau script dan function ini
          juga dapat digunakan berulang-ulang kali.
          ---------------------------------------
          func contohFunction() {
               fmt.Println("contoh function")
          }
          ---------------------------------------
      
      --> Cara menjalankan function yang sudah dibuat adalah
          dengan memanggilnya di dalam function main()
          -------------------------------------------------------------------------------------------------
          function main() {
               contohFunction()
          }
          -------------------------------------------------------------------------------------------------

29. Function parameter
      --> function parameter adalah data yang berasal dari luar function.
          ---------------------------------------------------------------
          contoh function dengan parameter:
          func contohFunction(parameter typeData) {
               // kode atau program kalian
          }
          
          contoh function dengan parameter dan contoh penggunaan: (parameter bisa lebih dari 1)
          func sayHello(firstname string, lastname string) {
               fmt.Println("Hello", firstname, lastname)
          }
          
          contoh penggunaaan func:
          func main() {
               sayHello("Agus", "Witoyo")
          }
          
          output: Hello Agus Witoyo
          ---------------------------------------------------------------
          
30. Function return value
      --> function return value adalah sebuah function yang memiliki kemampuan mengembalikan data.
          caranya adalah dengan menggunakan "return" didalam functionnya, dan pastikan menaruhnya di
          baris paling akhir dari function (karena kode yang terdapat di bawah "return" tidak akan dieksekusi!)
          --------------------------------------------------------------------------
          func example(name string) string {
             contoh := "halo " + name
             return contoh
          }

          func main() {
             fmt.Println(example("test"))
          }
          
          output: halo test
          --------------------------------------------------------------------------
          contoh lagi:
          func example(name string) string {
             if name == "" {
               return "isi nama dengan benar!"
             } else {
               return "halo " + name
             }
          }

          func main() {
             fmt.Println(example(""))
          }
          
          output: isi nama dengan benar!
          --------------------------------------------------------------------------

31. Function multiple return value
      --> Beda dengan bahasa pemrograman lain yang hanya dapat mereturn atau mengembalikan satu data.
          di golang, kalian bisa mengembalikan banyak data.
          --------------------------------------------------------------------------------------
          func yourName() (string, string, string) {
               return "denny", "saputro", "wingman"
          }
          
          cara pakai:
          func main() {
               firstName, middleName, lastName := yourName()
               fmt.Println(firstName)
               fmt.Println(middleName)
               fmt.Println(lastName)
          }
          
          output: denny
                  saputro
                  wingman
                  
      --> Kalau cuma butuh satu return value dari functionnya, kalian bisa gunakan garis bawah _
          func main() {
               firstName, _, _ := yourName()
               fmt.Println(firstName)
          }
          
          output: denny
          --------------------------------------------------------------------------------------

32. Named return value
      --> Ini sebenarnya adalah multiple return value, tetapi dengan penamaan dan variable di bagian returnnya
          --------------------------------------------------------------------------------------
          func person() (name string, age int8, cmHeight float32, hobby string) {      // kalau tipe datanya sama semua, cukup
               name = "agus"                                                              variable, variable, variable typeData
               age = 27                                                                  
               cmHeight = 183.2
               hobby = "fishing"
               return
          }
          
          func main() {
               name, age, cmHeight, hobby := person()    // nama variable gak harus sama, bisa a, b, c, dll
               fmt.Println("nama = ", name)
               fmt.Println("umur = "age)
               fmt.Println("tinggi badan = "cmHeight)
               fmt.Println("hobi = "hobby)
          }
          
          output: nama = agus
                  umur = 27
                  tinggi badan = 183.2
                  hobi = fishing
          
          Note: Perlu anda ketahui, diatas hanya contoh semata, penggunaannya kemungkinan untuk sesuatu yang lebih berguna dan kompleks
          --------------------------------------------------------------------------------------

33. Variadic function atau variable argument
      --> Variadic function adalah sebuah kemampuan dari parameter terakhir di dalam sebuah function.
          Kemampuan tersebut adalah dapat menyimpan data lebih dari satu input (semacam array) dan
          tanpa harus membuatnya terlebih dahulu.
          -----------------------------------------------------------------------------------------
          func sum(numbers ...int8) int8 {
               total := 0
               for _, number := numbers range {
                  total += number
               }
               return total
          }
          
          func main() {
               total := sum(10, 20, 30)
               fmt.Println(total)
          }
          
          output: 60
          -----------------------------------------------------------------------------------------
      --> Kalian bahkan bisa menggunakan data slice yang sudah ada, menjadi isi dari variadic function atau
          variable / parameter argument dari function, selama tipe datanya sama
          ---------------------------------------------------------------------------------
          func main() {
            slice := []int {55, 21, 3}
            total := sum(slice...)
            fmt.Println(total)
          }
          
          output: 79
          ---------------------------------------------------------------------------------
          
34. Function value
      --> function value adalah sebuah function yang disimpan di dalam sebuah variable dan variable yang menyimpan function tersebut
          akan memiliki kemampuan yang sama seperti functionnya.
         -----------------------------------------------------------------------------------
          func test(name string) string {
             return "halo " + name
          }
          
         func main() {
             var publicTest = test
             fmt.Println(publicTest("agus"))
         }
          
         output: halo agus 
         -----------------------------------------------------------------------------------

35. Function sebagai parameter
      --> Sebenarnya, kalian juga dapat menggunakan function di sebuah parameter pada function.
          Ini sangat berguna untuk memasukkan atau mengkombinasikan satu filter dengan filter lainnya.
          
          Misalnya: sayHello mempunyai dua parameter, 1. parameter string dan 2. parameter function string.
                    Kalian dapat memasukkan function lain (contoh dibawah adalah func spamFilter) ke
                    dalam function sayHello. Lihat lengkapnya dibawah
          ----------------------------------------------------------------------------------
          contoh: Dibawah ini adalah 2 function dengan fungsi yang berbeda, func sayHello digunakan
                  untuk mengatakan halo ke nama yang di input. Sedangkan func spamFilter digunakan
                  untuk menyaring kata-kata yang dianggap spam atau kotor.
                  
          func sayHello(name string, filter func(string) string) {
               nameFiltered := filter(name)
               fmt.Println("halo", nameFiltered)
          }
          
          func spamFilter(name string) string {
               if name == "Babi" {
                  return "..."
               } else {
                  return name
               }
          }
          
          contoh penggunaan:
          func main() {
               sayHello("andi", spamFilter)     output: halo andi
               sayHello("Babi", spamFilter)     output: halo ...
          }
          
          Note: Pastikan parameter function yang dimasukkan menggunakan tipe data yang sama agar tidak error
          ----------------------------------------------------------------------------------

36. Anonymus function
      --> anonymus function adalah function tanpa nama. Ini sering digunakan untuk menampilkan parameter sebagai function.
          ----------------------------------------------------------------------------------
          func registerUser(name string, blocked func(string) bool) {
               if blocked(name) == true {
                  fmt.Println("You are blocked", name)   // artinya kalau parameter blacklistnya true, maka yang true di jalankan
               } else {
                  fmt.Println("Welcome", name)  // kalau namanya tidak di blacklist, maka ini yang di jalankan
               }
          }
          
          // buat dulu anonymus function buat nanti ngisi parameter blacklist
          func main() {
               blacklist := func(name string) bool {
                  if name == "babi" {
                     return true
                  } else if name == "anjing" {
                     return true
                  } else {
                     return false
                  }
               }

               registerUser("andi", blacklist)
               registerUser("babi", blacklist)     // parameter 2: jika returnnya adalah true, maka parameter blocked yang di function
               registerUser("anjing", blacklist)      registerUser akan dijalankan. Jika false maka yang else akan dijalankan.
          }
          
          output: Welcome Andi
                  You are blocked Babi
                  
          Note: anonymus function kebanyakan digunakan untuk mengisi parameter yang berbentuk sebuah function.
                karena kalian tidak perlu menambahkan nama ke anonymus function, dan jika nanti ingin digunakan lagi,
                kalian dapat menyimpannya ke sebuah variable
          ----------------------------------------------------------------------------------

37. Recursive function
      --> recursive function adalah function yang menggunakan function dirinya sendiri.
      ---------------------------------------------------------------------------------------
      func factorialNumbers(number int) int {
            if number == 1 {
               return 1
            } else {
               return number * factorialNumbers(number-1)
            }
      }
      
      func main() {
         var data1 = factorialNumbers(5)
         fmt.Println(data1)
      }
      ---------------------------------------------------------------------------------------

38. Defer, Panic, Recover
      --> defer adalah function yang dipanggil setelah function selesai dijalankan.
          Ini sangat berguna untuk mengatasi function yang tidak terpanggil karena error atau kendala lainnya.
          Menggunakan defer, kalian akan tetap dapat menjalankan function diakhir, walaupun terjadi error sekalipun.
          -------------------------------------------------------------------------
          func success() {
               fmt.Println("Program success")
          }
          
          func increments(number int) {
               defer success()
               for total := 1;total <= number;total++ {
                  fmt.Println(total)
               }
          }
          
          func main() {
               increments(10)
          }
          
          output: 1
                  2
                  3
                  4
                  5
                  6
                  7
                  8
                  9
                  10
                  Program success
          
          -------------------------------------------------------------------------
      --> Panic adalah cara untuk memberitahu kalau terjadi error tertentu. Pesan errornya
          juga dapat kita atur sendiri.
          -------------------------------------------------------------------------
          func endProgram() {
               fmt.Println("selesai")
          }
          
          func hello(checkError bool) {
               defer endProgram()
               if checkError == true {
                  panic("terjadi error")
               } else {
                  fmt.Println("program berjalan")
               }
          }
          
          func main() {
               hello(true)
          }
          
          output: testing
                  panic: terjadi error

                  goroutine 1 [running]:
                  main.hello(0xa0?)
                          /home/halo-linux.go:12 +0xa5
                  main.main()
                          /home//halo-linux.go:19 +0x1e
                  exit status 2
          -------------------------------------------------------------------------
      --> Recovery adalah cara untuk menangkap pesan error dari panic(), tanpa harus
          mengeluarkan pesan error yang panjang. Jadi, lebih dapat mengontrol dan
          menyesuaikan pesan error saat error tersebut terjadi.
          
          Selain itu, ini juga dapat mencegah kode kode dibawahnya terhenti (dibawah function
          yang error).
          
          Misal: sayHello()
                 fmt.Println("ini kode dibawahnya")   // kode ini akan tetap dijalankan jika kalian menggunakan recover()
                                                         untuk menangkap pesan error yang ditangkap panic()
          
          Note: pastikan membuat recover() sebelum panic() atau disarankan menggunakan
                defer (karena defer tetap akan dijalankan walaupun terjadi error)
          -------------------------------------------------------------------------
          func endProgram() {
             errorMessage := recover()
             if errorMessage != nil {                 // nil sama seperti null, artinya kosong atau tidak ada.
                fmt.Println("pesan:", errorMessage)      kode nil disamping artinya kalau tidak nil atau tidak kosong (alias terjadi
             } else {                                    error, karena errorMsg tugasnya menangkap error) maka jalankan...
                fmt.Println("selesai")
             }
          }
          
          func hello(checkError bool) {
               defer endProgram()
               if checkError == true {
                  panic("telah terjadi error")
               } else {
                  fmt.Println("program berjalan")
               }
          }
          
          func main() {
               hello(true)
               hello(false)
          }
          
          output true:
                        pesan: telah terjadi error
          
          output false:
                        program berjalan
                        selesai
          -------------------------------------------------------------------------

39. Komentar
      --> Komentar adalah bagian kode yang tidak akan di eksekusi atau dijalankan.
          Umumnya ini digunakan untuk memberikan keterangan ke kode (function, variable, dll) yang sulit dimengerti,
          atau sedakar untuk menambahkan sedikit penjelasan untuk kode yang ditulis.
          --------------------------------------------------------------------------
          1. Membuat komentar pendek satu baris
             - Gunakan // di bagian paling depan dari kode untuk membuat komentar pendek
          2. Membuat komentar massal (untuk banyak baris)
             - Gunakan /** komentar anda */
          --------------------------------------------------------------------------

40. Struct
      --> struct adalah template atau struktur data yang digunakan untuk menggabungkan beberapa tipe data yang berbeda menjadi
          satu kesatuan. Struct tidak bisa digunakan secara langsung, namun kita dapat membuat data atau object dari struct
          yang kita buat. Kalian bisa mengaggap struct seperti sebuah tipe data baru yang telah kita buat.
          ---------------------------------------------------------------------------
      --> Buat data struct:
          
          type DataPerson struct {
            Name, Address string
            Age           int
          }
          ----------------------------------------------------------------------------
      --> Cara pakai struct:
          
          func main() {
               // buat variable dari struct yang sudah dibuat
               var agus DataPerson
               
               // Cara isi valuenya
               agus.Name = "agus witoyo"
               agus.Address = "Indonesia"
               agus.Age = 24
               
               fmt.Println(agus.Name)
               fmt.Println(agus.Address)
               fmt.Println(agus.Age)
               fmt.Println(agus)
          }
          
          output: agus witoyo
                  Indonesia
                  24
                  {agus witoyo Indonesia 24}
          ---------------------------------------------------------------------------
      --> Cara cepat isi data struct
          
          var agus = DataPerson {
               Name: "agus witoyo",
               Address: "Indonesia",
               Age: 24,
          }
          ----------------------------------------------------------------------------

41. Struct Method
      --> Struct method adalah kemampuan struct yang mirip dengan function.
          Jadi, seakan-akan struct mempunyai sebuah function.
          -------------------------------------------------------------------------------
          type DataPerson struct {
            Name, Address string
            Age           int
          }
          
          // function ini, mempunyai fitur struct
          func (person DataPerson) sayHello(name string) {
               fmt.Println("Halo", person.Name, "Perkenalkan aku", name)
          }
          
          func main() {
               andy := DataPerson {
                  Name: "andy",
                  Address: "Indonesia",
                  Age: 23,
               }
               
               andy.sayHello("agus")
          }
          -------------------------------------------------------------------------------

42. Interface
      --> interface di golang adalah sebuah kontrak yang dedeklarasikan. Jika isi dari kontrak yang
          ada didalam interface sama dengan sebuah function tertentu (Nama dan return valuenya sama),
          maka kalian dapat menggunakan semua function yang terikat dengan interface.
          ------------------------------------------------------------------------------------------------------------------------
          type HasName interface {                    // deklarasi interface
               GetName() string                       // function GetName() dengan return value string adalah kontraknya
          }
          
          func sayHello(hasName HasName) {            // function ini menggunakan interface HasName sebagai parameter
               fmt.Println("Halo", hasName.GetName())    dan terikat secara tidak langsung dengan interface HasName
          }                                           // function ini tidak bisa digunakan jika kalian belum membuat
                                                         sebuah fuction yang terikat dengan kontrak interfacenya
          
          type Person struct {                        // deklarasi sebuah struct
               Name string
          }
          
          func (person Person) GetName() string {     // func GetName() dengan return value string, yang berarti sesuai
               return person.Name                        dengan kontrak dari interface HasName (artinya mempunyai kemampuan
          }                                              untuk menggunakan function atau data lainnya yang terikat secara langsung
                                                         maupun tidak langsung dengan interface HasName
          
          func main() {
               var andy = Person {
                     Name: "andy",
               }
               fmt.Println(andy.GetName())
               
               // Saya mencoba mengakses func sayHello() yang terikat dengan interface HasName
               sayHello(andy)
          }
          
          // Kalian bahkan dapat menggunakan function GetName() lagi dengan data struct yang berbeda
          type Hewan struct {
               Name string
          }
          
          func (hewan Hewan) GetName() string {       // ini gak masalah menggunakan function yang sama,
              return hewan.Name                          karena memiliki struct yang berbeda
          }
          
          func main() {
               cat := Hewan {
                  Name: "cat",
               }
               
               fmt.Println(cat.GetName)
               sayHello(cat)
          }
          
          Note: Disarankan saat menggunakan interface, jika membuat function yang menggunakan struct, pastikan
                menggunakan struct method! (bukan struct yang dijadikan parameter dari function!)
          ------------------------------------------------------------------------------------------------------------------------

43. Interface kosong
      --> Interface kosong adalah sebuah interface yang dapat berisi tipe data apapun yang ada di golang. Mau itu string,
          int, floating point, slice, array, struct, dll.
          
          Beberapa contoh yang menggunakan interface kosong:   - fmt.Println()
                                                               - panic()
                                                               - recover()
                                                               - dan lain-lain
                                                               
          -------------------------------------------------------------------------------------------
      --> Cara buat interface kosong
          
          func noneInt(param interface{}) interface{} {     // function ini memiliki parameter dan
               if param == 1 {                                 return valuenya berupa interface kosong
                  return 1    // integer
               } else if param == 2 {
                  return true // boolean
               } else {
                  return "ini else"    // string
               }
          }
          
          func main() {
             fmt.Println(noneInt(1))
             fmt.Println(noneInt(2))
             fmt.Println(noneInt(3))
          }
          
          output: 1
                  true
                  ini else
                  
      --> Cara nyimpan function yang menggunakan interface kosong
          
          var test interface{} = noneInt(1)
          fmt.Println(test)
          ------------------------------------------------------------------------------------------- 

44. Nil atau null
      --> Nil adalah sebuah object yang belum dideklarasikan atau object yang kosong. Secara default
          atau bawaan, saat membuat variable dengan tipe data tertentu, secara otomatis kita akan di-
          buatkan default valuenya. Misal var name string. maka otomatis valuenya akan bernilai string.
          
          Namun di golang juga ada beberapa data, function atau lainnya yang memiliki tipe data Nil.
          Seperti interface, function, map, slice, pointer dan channel.
          
          Note: Ini berguna jika dalam sebuah function menggunakan parameter atau return valuenya adalah
                interface, function, map, slice, pointer, atau sebuah channel. Karena dengan menggunakan
                nil, kalian dapat menginialisasikan data yang kalian sepakati kosong dalam tipe data lain,
                diterjemahkan menjadi data kosong di interface, function, map, slice, pointer, atau sebuah channel.
          --------------------------------------------------------------------------------------------
          Contoh kasus: sebuah function newMap() mengharuskan kalian menggunakan parameter string dan me-return data berupa map[].
                        kalian ingin membuat sebuah map[] baru jika parameter berisi string kosong "". Maka kalian harus memberi tau
                        map[] di function newMap() kalau parameter yang diisi adalah kosong dan kalian juga harus mereturn
                        sebuah map[].
          Jawaban     : Tentu saja bisa, dengan menggunakan nil (atau null dalam bahasa pemrograman lain) kalian dapat menerjemahkan
                        data kosong dalam tipe data tertentu ke data interface, function, dan lainnya, dan tidak akan terjadi error.
                        Silahkan lihat contoh function dibawah ini.
          
          func newMap(name string) map[string]string {
               if name == "" {
                  return nil              // kalian tidak bisa me-return string "" karena bukanlah sebuah data map[].
               } else {                      kalian juga tidak bisa melakukan println.
                  return map[string]string {
                     "Name": name,
                  }
               }
          }
          
          func main() {
               var person map[string]string = newMap("")
               if person == nil {
                  fmt.Println("Data Kosong")
               } else {
                  fmt.Println(person)
               }
               
               var orang map[string]string = newMap("agus")
               if agus == nil {
                  fmt.Println("Data Kosong")
               } else {
                  fmt.Println(agus)
               }
          }
          
          output person: Data Kosong
          output orang : map[Name:agus]
          --------------------------------------------------------------------------------------------
          
45. Interface error
      --> Di golang, kita juga dapat membuat sebuah interface error dengan menggunakan kontrak function bawaan Error().
          --------------------------------------------------------------------------------------------
          cara buat interface error:
          
          type error interface {
               Error() string
          }
          
      --> Menggunakan library khusus yang digunakan untuk menangani error.
          import (
             "fmt"
             "errors"
          )

          func pembagian(nilai int, pembagi int) (int, error) {
             if pembagi == 0 {
                return 0, errors.New("Pesan Error: angka tidak boleh 0")
             } else {
                return nilai / pembagi, nil
             }
          }

          func main() {
             hasil, err := pembagian(42, 0)
             if err == nil {
                fmt.Println("Hasil:", hasil)
             } else {
                fmt.Println(err.Error())
             }
          }
          
          output: Pesan Error: angka tidak boleh 0
          --------------------------------------------------------------------------------------------

46. Type assertions
      --> Type assertions adalah kemampuan untuk mengubah tipe data ke tipe data yang di inginkan.
          Umumnya ini digunakan untuk interface kosong.
          ---------------------------------------------------------------------------------------------
          contoh: ubah random() interface kosong, menjadi string
          func random() interface{} {
               return "OKAY"
          }
          
          func main() {
               var hasil interface{} = random()
               hasilString := hasil.(string)
               fmt.Println(hasilString)
               
               hasilInteger := hasil.(int)   ==> ini error / panic, karena return value dari random() adalah string, bukan int
               fmt.Println(hasilInteger)
          }
          
          output: OKAY
          ---------------------------------------------------------------------------------------------
      --> Cara otomatis mendeteksi dan menerapkan tipe data dari interface kosong
      
          func random() interface{} {
               return 1000
          }
          
          func main() {
               var hasil interface{} = random()
               switch value := hasil.(type) {
               case string:
                     fmt.Println("Hasil", value, "is string")
               case int:
                     fmt.Println("Hasil", value, "is integer")
               case bool:
                     fmt.Println("Hasil", value, "is boolean")
               default:
                     fmt.Println("Unknown type")
               }
          }
          
          output: Hasil 1000 is integer
          ---------------------------------------------------------------------------------------------

47. Pointer
      --> Pointer adalah kemampuan untuk menggunakan hanya satu sumber dari banyak duplikasi data.
          Misalnya, variable1 := [...]string {
                                    "kucing",
                                    "anjing",
                                 }
                    variable2 := variable1
                    
                    Umumnya jika kita mengubah variable2, maka variable1 tidak akan terpengaruh, dan datanya tetap sama.
                    Alasan tidak berubah adalah karena variable2 menduplikasi data dari variable1.
                    
                    Artinya variable1 punya data {"kucing", "anjing"} dan
                            variable2 juga punya data sendiri {"kucing", "anjing"}
                            
                    Jika kita ubah variable2[0] = "tikus"
                    maka, variable1 punya data {"kucing", "anjing"} dan
                          variable2 datanya berubah menjadi {"tikus", "anjing"}
         
         Nah, dengan menggunakan pointer, kita bisa membuat satu data yang sama yang dapat dipakai banyak variable atau function.
         Tanpa harus membuat setiap duplikasinya. Dan juga, ini berarti jika kita mengubah salah satu data dari variable atau sumber
         manapun, maka semua data di variable atau sumber lain juga akan ikut berubah.
         ---------------------------------------------------------------------------------------------------------------------------
         cara buat pointer:
         
         Tambahkan & diawal nama dari variable yang ingin dicopy
         
         var name1 = "abcdefg"
         var name2 = &name1
         
         fmt.Println(name1)   output: abcdefg
         fmt.Println(name2)   output: abcdefg
         
         var name2 = "gfedcba"
         fmt.Println(name1)   output: gfedcba
         fmt.Println(name2)   output: gfedcba
         
     --> Jika ingin mengubah keseluruhan dari variable pointer, maka harus menggunakan tanda *
         type name struct {
            name1, name2, name3 string
         }
         
         func main() {
            test := Name{"satu", "dua", "tiga"}
            test2 := &test
            test3 := &test

            test2.name2 = "joko"
            fmt.Println(test)                         output: {satu joko tiga}
            fmt.Println(test2)                        output: &{satu joko tiga}
            fmt.Println(test3)                        output: &{satu joko tiga}
            
            ----------------------------------------------------------------------
            test2 = &Name{"empat", "lima", "enam"}
            fmt.Println(test)                         output: {satu joko tiga}
            fmt.Println(test2)                        output: &{empat lima enam}
            fmt.Println(test3)                        output: &{satu joko tiga}
            
            *test3 = Name{"empat", "lima", "enam"}
            fmt.Println(test)                         output: {empat lima enam}
            fmt.Println(test2)                        output: &{empat lima enam}
            fmt.Println(test3)                        output: &{empat lima enam}
            --------------------------------------------------------------------
         Note: jika kita melakukan 2 kali pointer yang berbeda pada variable yang sama, maka pointer terakhir tidak akan bekerja.
               Contohnya seperti (&, *) pada variable yang sama.
         ---------------------------------------------------------------------------------------------------------------------------

48. 
